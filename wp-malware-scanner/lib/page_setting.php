<?php
spl_autoload_register(function ($class_name) {
    // Check if class name is in namespace
    if (strpos($class_name, 'AMWScan\\') !== false) {
        // Load the class file
        $cls = str_replace('\\', '/', $class_name);
        $cls = str_replace("AMWScan/","",$cls);
        require_once WP_PLUGIN_DIR . '/wp-malware-scanner/scanner/src/' . $cls . '.php';
    }
});

use AMWScan\Scanner;


    // Create the function which does the work
    function wp_malware_scanner_scheduled_event_action() {
        $options = get_option( 'wp_malware_scanner_options_run_status', "idle" );
        update_option( 'wp_malware_scanner_options_run_shed',"Running Now" );
        if ($options == "idle" || $options == "complete" || $options == "called") {
            update_option('wp_malware_scanner_options_run_status', "running");
            $app = new Scanner();
            $report = $app->setPathScan(ABSPATH)
                        ->setIgnorePaths([ABSPATH."/wp-content/plugins/wp-malware-scanner/scanner/src/"])
                        ->setAutoCleanLine(false)
                        ->setAutoClean(false)
                        ->setOnlySignaturesMode(false)
                        ->setAutoSkip(false)
                        ->setSilentMode(true)
                        ->run();
            $report_array = (array) $report;
            $report_array["last_run"] = time();
            update_option('wp_malware_scanner_options_run_status', "complete");
            update_option( 'wp_malware_scanner_options_run_shed',time() );
            update_option('wp_malware_scanner_options_run_result', $report_array);
        }
    }

    function wp_malware_scanner_background_single_action() {
        update_option( 'wp_malware_scanner_options_run_shed',time() );

        try {
            wp_malware_scanner_scheduled_event_action();
        } catch (\Throwable $th) {
            error_log($th->getMessage());
            //throw $th;
            update_option('wp_malware_scanner_options_run_status', "complete");
            update_option( 'wp_malware_scanner_options_run_shed',time() );
            update_option('wp_malware_scanner_options_run_result', array(
                "scanned" => "Error",
                'detected' => "Error",
                'removed' => array(),
                'ignored' => array(),
                'edited' => array(),
                'quarantine' => array(),
                'whitelist' => array(),
                'last_run' => time()
            ));
        }
        // Unhook the event
        wp_clear_scheduled_hook( 'wp_malware_scanner_background_task' );
    }

    function wp_malware_scanner_home(){

        class wp_malware_scanner {
            public function __construct() {
                $options = get_option( 'wp_malware_scanner_options_run_status', "idle" );
                $run_shed = get_option( 'wp_malware_scanner_options_run_shed', "none" );
                echo '<div class="wrap">';
                echo "<h1>Scanner</h1>";
                
                if ($options == "idle" || $options == "complete" || $options != "called") {

                    if (isset($_POST["run_now"])) {
                        update_option('wp_malware_scanner_options_run_status', "called");
                        echo "<h3>Scan Called</h3>";
                        $this->startScanNow();
                        unset($_POST["run_now"]);
                    }
                    else{
                        echo '<form action="#" method="post">';
                        echo '<input type="hidden" name="run_now" value="ok">';
                        echo '<input type="submit" class="button button-primary" value="Start Scan">';
                        echo '</form>';
                    }
                }
                else{
                    echo "<h3>Scan Running..</h3>";
                }

                $array = get_option( 'wp_malware_scanner_options_run_result', array(
                    "scanned" => 0,
                    'detected' => 0,
                    'removed' => array(),
                    'ignored' => array(),
                    'edited' => array(),
                    'quarantine' => array(),
                    'whitelist' => array(),
                    'last_run' => 0
                )
            );

                echo "<p>Scanned: ".$array["scanned"]."</p>";
                echo "<p>Detected: ".$array["detected"]."</p>";
                if (!is_null($array["last_run"] ) && $array["last_run"] != 0) {
                    echo "<p>Last Run: ". date('Y-m-d H:i:s', $array["last_run"])."</p>";
                }
                else{
                    echo "<p>Last Run: None</p>";
                }
                
               

                if (!is_null($run_shed) && $run_shed != "none") {
                    echo "<p>Sheduled Run: ". date('Y-m-d H:i:s', $run_shed)."</p>";
                }
                else{
                    echo "<p>Sheduled Run: Not Sheduled</p>";
                }
 
                echo "<h2>Last Scan Results</h2>";
                echo '<table class="wp-list-table widefat plugins" cellspacing="0">';
                echo '<thead>';
                echo '    <tr>';
                echo '        <th id="columnname" class="manage-column column-columnname" scope="col">Key</th>';
                echo '        <th id="columnname2" class="manage-column column-columnname2" scope="col">Value</th>';
                echo '    </tr>';
                echo '</thead>';
                echo '<tfoot>';
                echo '<tr>';
                echo '        <th class="manage-column column-columnname scope="col"></th>';
                echo '        <th class="manage-column column-columnname2" scope="col"></th>';
                echo '</tr>';
                echo '</tfoot>';
                echo '<tbody id="the-list">';

                foreach($array["edited"] as $row){
                    echo "<tr><td>"+$row+"<td><td>Edited<td></tr>";
                }

                foreach((array)$array["ignored"] as $row){
                    echo "<tr class=\"alternate\" valign=\"top\"><td class=\"column-columnname\">$row</td><td class=\"column-columnname2\">Sign</td></tr>";
                }

                foreach( (array) $array["removed"] as $row){
                    echo "<tr><td>"+$row+"<td><td>Removed<td></tr>";
                }

                foreach($array["quarantine"] as $row){
                    echo "<tr><td>"+$row+"<td><td>Quarantine<td></tr>";
                }

                foreach($array["whitelist"] as $row){
                    echo "<tr><td>"+$row+"<td><td>Whitelist<td></tr>";
                }

                echo '</tbody>';
                echo '</table>';


                if (isset($_POST["purge_mls_cache"])) {
                    echo "<h3>Purge Plugin Cache - OK</h3>";
                    update_option('wp_malware_scanner_options_run_status', "idle");
                    update_option( 'wp_malware_scanner_options_run_shed',time() );
                    delete_transient('wpMalwareScannerUpdate_cache');
                    update_option('wp_malware_scanner_options_run_result', array(
                        "scanned" => 0,
                        'detected' => 0,
                        'removed' => array(),
                        'ignored' => array(),
                        'edited' => array(),
                        'quarantine' => array(),
                        'whitelist' => array(),
                        'last_run' => 0
                    ));
                    unset($_POST["purge_mls_cache"]);
                }
                else{
                    echo '<form action="#" method="post">';
                    echo '<input type="hidden" name="purge_mls_cache" value="ok">';
                    echo '<input type="submit" class="button button-primary" value="Purge Plugin Cache">';
                    echo '</form>';
                }

                //Last
                echo '</div>';

            }

            //update_option( 'wp_malware_scanner_options_update_check', "CHECKED" );
            //start task now 
            function startScanNow()
            {
                if ( ! wp_next_scheduled( 'wp_malware_scanner_background_task' ) ) {
                    wp_schedule_single_event( time() , 'wp_malware_scanner_background_task' );
                }                
            }

        }
        new wp_malware_scanner();
    }
?>